"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_split-e9f9927d_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/split-e9f9927d.browser.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/split-e9f9927d.browser.esm.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Split: function() { return /* binding */ Split; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _fetchCurrencyValue_39f97190_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fetchCurrencyValue-39f97190.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-39f97190.browser.esm.js\");\n/* harmony import */ var _index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-827e427d.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/index-827e427d.browser.esm.js\");\n/* harmony import */ var _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transactions-ec5ea12e.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/transactions-ec5ea12e.browser.esm.js\");\n/* harmony import */ var _contract_appuri_4e9cb063_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./contract-appuri-4e9cb063.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-appuri-4e9cb063.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_6f8989ff_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-interceptor-6f8989ff.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-6f8989ff.browser.esm.js\");\n/* harmony import */ var _contract_roles_94655dc4_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./contract-roles-94655dc4.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-roles-94655dc4.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  static contractRoles = _index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.dF;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.cu(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = _index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.bn.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new _contract_appuri_4e9cb063_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.C(this.contractWrapper, _index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.c9, this.storage);\n    this.app = new _contract_appuri_4e9cb063_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.b(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_roles_94655dc4_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.C(this.contractWrapper, Split.contractRoles);\n    this.encoder = new _fetchCurrencyValue_39f97190_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper);\n    this.estimator = new _contract_appuri_4e9cb063_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.G(this.contractWrapper);\n    this.events = new _contract_appuri_4e9cb063_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.a(this.contractWrapper);\n    this.interceptor = new _contract_interceptor_6f8989ff_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.C(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(tokenAddress), (0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(walletAddress)]);\n    const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n    const erc20 = new ethers__WEBPACK_IMPORTED_MODULE_9__.Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await (0,_fetchCurrencyValue_39f97190_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a)(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */(0,_transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.c)(async walletAddress => {\n    return _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await (0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */(0,_transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.c)(async (walletAddress, tokenAddress) => {\n    return _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(tokenAddress), (0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */(0,_transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.c)(async () => {\n    return _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */(0,_transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.c)(async tokenAddress => {\n    return _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await (0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([(0,_index_827e427d_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.aP)(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _transactions_ec5ea12e_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.T.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/split-e9f9927d.browser.esm.js\n"));

/***/ })

}]);